plugins {
	id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.142'
    id "com.matthewprenger.cursegradle" version "1.4.0"
	id "com.modrinth.minotaur" version "2.+"
}

version = _minecraft_version + "-" +modVersion +"-"+modLoader
group = modGroup // http://maven.apache.org/guides/mini/guide-naming-conventions.html
base {
    archivesName = _mod_name
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
println('Mod Name: ' + _mod_name + ', Mod Version: ' + modVersion + ', Minecraft Version: ' + _minecraft_version + ', '+modLoader+' Version: ' + _loader_version)

minecraft {
  accessTransformers {
    file('src/main/resources/META-INF/accesstransformer.cfg')
  }
}

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        modSource project.sourceSets.main
    }
    client {
        systemProperty 'forge.enabledGameTestNamespaces', project._mod_id
        workingDirectory project.file('run/Neo-Client')
    }
    server {
        systemProperty 'forge.enabledGameTestNamespaces', project._mod_id
        workingDirectory project.file('run/Neo-Server')
        programArgument '--nogui'
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.extendsFrom localRuntime
}

repositories {
	maven {url "https://modmaven.dev/" }// UnionLib
	maven {
		url = "https://maven.theillusivec4.top/"
	}
	maven {url "https://www.cursemaven.com"}
    maven {url = "https://repo.spongepowered.org/maven"} // mixin
}

dependencies {
	implementation "net.neoforged:neoforge:${_loader_version}"
	implementation ("com.stereowalker.unionlib:UnionLib:"+_minecraft_version+"-"+unionLibVersion+"-"+modLoader+"")
	compileOnly ("top.theillusivec4.curios:curios-neoforge:${curiosVersion}+${_minecraft_version}:api")
	runtimeOnly ("top.theillusivec4.curios:curios-neoforge:${curiosVersion}+${_minecraft_version}")
	implementation ("top.theillusivec4.curios:curios-neoforge:${curiosVersion}+${_minecraft_version}")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": _mod_name,
            "Specification-Vendor": "Stereowalker",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"Stereowalker",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

curseforge {
    project {
    	id = modCurseId
		apiKey = "$System.env.CURSEFORGEKEY"
		changelog = file('changelog.md')
		releaseType = 'release'
		addGameVersion(_minecraft_version)
		/*addGameVersion("1.20")
		addGameVersion("1.19.4")
		addGameVersion("1.19.3")
		addGameVersion("1.19.2")
		addGameVersion("1.19.1")
		addGameVersion("1.19")*/
        addGameVersion("Forge")
		relations {
      		requiredDependency 'unionlib'
		}
		mainArtifact(jar) {
			displayName = _mod_name+"-$project.version"
		}
	}		
}


modrinth {
    token = "$System.env.MODRINTH_TOKEN"
    projectId = _mod_id
    versionNumber = "${project.version}"
    versionType = "release"
    uploadFile = jar
    gameVersions = [_minecraft_version/*, "1.20", "1.19.4", "1.19.3", "1.19.2", "1.19.1", "1.19"*/]
    loaders = ["${project.modLoader}".toLowerCase()]
	changelog = file('changelog.md').text
    dependencies {
        required.project "unionlib"
    }
}

task uploadToAllSites {
    uploadToAllSites.dependsOn curseforge
    uploadToAllSites.dependsOn modrinth
}


tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: _minecraft_version, //minecraft_version_range: minecraft_version_range,
            //forge_version: _loader_version, forge_version_range: forge_version_range,
            loader_version_range: "[${_loader_version_min},"+_loader_version_max+")",
            mod_id: _mod_id, mod_name: _mod_name, mod_license: _mod_license, mod_version: modVersion,
            mod_authors: _mod_authors, mod_description: _mod_description,
    ]
    inputs.properties replaceProperties
    filesMatching(['META-INF/neoforge.mods.toml', 'pack.mcmeta']) {
        expand replaceProperties/* + [project: project]*/
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

artifacts {
}
