plugins {
	id 'fabric-loom' version '1.7-SNAPSHOT'
	id 'maven-publish'
	id "com.matthewprenger.cursegradle" version "1.4.0"
	id "com.modrinth.minotaur" version "2.+"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

version = _minecraft_version + "-" +modVersion +"-"+modLoader
group = modGroup // http://maven.apache.org/guides/mini/guide-naming-conventions.html
base {
    archivesName = _mod_name
}


println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
println('Mod Name: ' + _mod_name + ', Mod Version: ' + modVersion + ', Minecraft Version: ' + _minecraft_version + ', '+modLoader+' Version: ' + _loader_version)

loom {
    accessWidenerPath = file("src/main/resources/"+_mod_id+".accesswidener")
}

repositories {
	mavenCentral()
	maven { url = "https://maven.terraformersmc.com/releases/" }
	maven {url = "https://repo.spongepowered.org/maven"} // mixin
	maven {url "https://www.cursemaven.com"} //cursemaven
	maven {url "https://modmaven.dev/" } //UnionLib
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project._minecraft_version}"
	mappings loom.layered() {
  		officialMojangMappings()
  		//parchment("org.parchmentmc.data:parchment-"+mappingsVersion+"@zip")
	}
	modImplementation "net.fabricmc:fabric-loader:${project._loader_version}"
	modImplementation "curse.maven:forge-config-api-port-fabric-547434:5397254"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "com.stereowalker.unionlib:UnionLib:"+_minecraft_version+"-"+unionLibVersion+"-"+modLoader+""
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project._loader_api_version}"
	implementation 'com.electronwill.night-config:core:3.6.3'
	implementation 'com.electronwill.night-config:toml:3.6.3'
}

loom {
	runs { 
		client { 
			runDir "run/Fabric-Client" 
		}
		server { 
			runDir "run/Fabric-Server" 
		} 
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

curseforge {
    project {
    	id = modCurseId
		apiKey = "$System.env.CURSEFORGEKEY"
		changelog = file('changelog.md')
		changelogType = "markdown"
		releaseType = 'release'
		addGameVersion(_minecraft_version)
        addGameVersion("${project.modLoader}")
        addGameVersion("Quilt")
        relations {
        	requiredDependency "unionlib"
        }
		mainArtifact(remapJar) {
			displayName = _mod_name+"-${project.version}"
		}
		afterEvaluate {
			uploadTask.dependsOn(remapJar)
		}
	}
	options {
    	debug = false // defaults to false
    	forgeGradleIntegration = false
  	}	
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = _mod_id
    versionNumber = "${project.version}"
    versionType = "release"
    uploadFile = remapJar
    gameVersions = [_minecraft_version/*, "1.20", "1.19.4", "1.19.3", "1.19.2", "1.19.1", "1.19"*/]
    loaders = ["${project.modLoader}".toLowerCase(), "quilt"]
	changelog = file('changelog.md').text
    dependencies {
        required.project "unionlib"
    }
}

task uploadToAllSites {
    uploadToAllSites.dependsOn curseforge
    uploadToAllSites.dependsOn modrinth
}


tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: _minecraft_version, //minecraft_version_range: minecraft_version_range,
            //forge_version: _loader_version, forge_version_range: forge_version_range,
            loader_version_range: "[\">=${_loader_version_min}\", \"<"+_loader_version_max+"\"]",
            mod_id: _mod_id, mod_name: _mod_name, mod_license: _mod_license, mod_version: modVersion,
            mod_authors: _mod_authors, mod_description: _mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['fabric.mod.json', 'pack.mcmeta']) {
        expand replaceProperties/* + [project: project]*/
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

artifacts {
}
