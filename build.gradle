plugins {
	id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    id "com.matthewprenger.cursegradle" version "1.4.0"
	id "com.modrinth.minotaur" version "2.+"
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, _mod_id+".refmap.json"
    config "${_mod_id}.mixins.json"
}

version = modMinecraftVersion + "-" +modVersion +"-"+modLoader
group = modGroup // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = _mod_name

//java.toolchain.languageVersion = JavaLanguageVersion.of(21)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
println('Mod Name: ' + _mod_name + ', Mod Version: ' + modVersion + ', Minecraft Version: ' + modMinecraftVersion + ', '+modLoader+' Version: ' + _loader_version)

minecraft {
    mappings channel: mappingsChannel, version: mappingsVersion
    reobf = false
    copyIdeResources = true
    //makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run/client')
            property 'forge.logging.markers', 'REGISTRIES'
			arg "-mixin.config="+_mod_id+".mixins.json"

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
			
			
            property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                "${_mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')
            property 'forge.logging.markers', 'REGISTRIES'
			arg "-mixin.config="+_mod_id+".mixins.json"

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
			
			
            property 'mixin.env.disableRefMap', 'true'
			

            mods {
                "${_mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
	maven {url "https://modmaven.dev/" }// UnionLib
	maven {
		url = "https://maven.theillusivec4.top/"
	}
	maven {url "https://www.cursemaven.com"}
    maven {url = "https://repo.spongepowered.org/maven"} // mixin
}

dependencies {
	minecraft 'net.minecraftforge:forge:' + modMinecraftVersion + '-' + _loader_version
	annotationProcessor "org.spongepowered:mixin:"+modMixinVersion+":processor"
	implementation "org.spongepowered:mixin:"+modMixinVersion+""
	implementation fileTree(include: ['*.jar'], dir: 'libs')
	implementation ("com.stereowalker.unionlib:UnionLib:"+modMinecraftVersion+"-"+unionLibVersion+"-"+modLoader+"")
	compileOnly ("top.theillusivec4.curios:curios-forge:${curiosVersion}+${modMinecraftVersion}:api")
	runtimeOnly ("top.theillusivec4.curios:curios-forge:${curiosVersion}+${modMinecraftVersion}")
	implementation ("top.theillusivec4.curios:curios-forge:${curiosVersion}+${modMinecraftVersion}")
	implementation('net.sf.jopt-simple:jopt-simple:5.0.4') { version { strictly '5.0.4' } }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": _mod_name,
            "Specification-Vendor": "Stereowalker",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"Stereowalker",
            "MixinConfigs": _mod_id+".mixins.json",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

curseforge {
    project {
    	id = modCurseId
		apiKey = "$System.env.CURSEFORGEKEY"
		changelog = file('changelog.md')
		releaseType = 'release'
		addGameVersion(modMinecraftVersion)
		/*addGameVersion("1.20")
		addGameVersion("1.19.4")
		addGameVersion("1.19.3")
		addGameVersion("1.19.2")
		addGameVersion("1.19.1")
		addGameVersion("1.19")*/
        addGameVersion("Forge")
		relations {
      		requiredDependency 'unionlib'
		}
		mainArtifact(jar) {
			displayName = _mod_name+"-$project.version"
		}
	}		
}


modrinth {
    token = "$System.env.MODRINTH_TOKEN"
    projectId = _mod_id
    versionNumber = "${project.version}"
    versionType = "release"
    uploadFile = jar
    gameVersions = [modMinecraftVersion/*, "1.20", "1.19.4", "1.19.3", "1.19.2", "1.19.1", "1.19"*/]
    loaders = ["${project.modLoader}".toLowerCase()]
	changelog = file('changelog.md').text
    dependencies {
        required.project "unionlib"
    }
}

task uploadToAllSites {
    uploadToAllSites.dependsOn curseforge
    uploadToAllSites.dependsOn modrinth
}


tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            //minecraft_version: modMinecraftVersion, minecraft_version_range: minecraft_version_range,
            //forge_version: _loader_version, forge_version_range: forge_version_range,
            loader_version_range: "[${_loader_version_min},"+_loader_version_max+")",
            mod_id: _mod_id, mod_name: _mod_name, mod_license: _mod_license, mod_version: modVersion,
            mod_authors: _mod_authors, mod_description: _mod_description,
    ]
    inputs.properties replaceProperties
    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties/* + [project: project]*/
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

artifacts {
}

eclipse {
    synchronizationTasks 'genEclipseRuns'
}
//Remove later
sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}
